package org.example;

import java.io.CharArrayReader;
import java.util.Collection;
import java.util.Collections;
import java.util.Scanner;
import java.awt.*;
import java.util.Arrays;


// 문제 : 아래가 실행되도록 해주세요.

class Main {
    public static void main(String[] args) {
        무기 a무기 = new 칼();

        칼 a칼 = new 칼();
        a칼 = new 활();

        무기 b무기 = new 칼();
        b무기.공격();
        // 출력 : 칼로 공격합니다.

    }
}

class 무기 {
    void 공격() {}
}

class 칼 extends 무기 {
    void 공격() {
        System.out.println("칼로 공격합니다.");
    }
}

class 활 extends 칼 {

}

// 문제 : `무기 a무기 = new 칼();` 가 실행되는 세부과정을 자세히 쓰세요.

class Main {
    public static void main(String[] args) {
        // * double d = 5.5; 의 처리과정
        // 1 : 실수 5.5가 생긴다.
        // 2 : 오직 실수만 담을 수 있는 변수 d가 생성된다.
        // 3 : d는 5.5가 자신안에 들어 올 수 있는지 판단한다.(가능)
        // 4 : d변수에 실수 5.5가 들어간다.
        double d = 5.5;

        // * double dd = 5; 의 처리과정
        // 1 : 정수 5가 생긴다.
        // 2 : 오직 실수만 담을 수 있는 변수 dd가 생성된다.
        // 3 : dd는 5가 자신안에 들어 올 수 있는지 판단한다.
        // 4 : 5는 정수이기 때문에 들어 올 수 없다고 판단한다.(불가능)
        // 5 : dd가 아쉬워하는 5에게 이렇게 이야기 합니다. `니가 실수로 변환될 수 있다면 들어올 수 있다.`
        // 6 : 5는 자신의 형태를 버리고 실수화 한다. 즉 5.0으로 변신하다.(캐스팅, 또는 형변환)
        // 7 : dd로 5.0이 들어간다.
        double dd = 5;

        // * int i = 5.5; 의 처리과정
        // 1 : 실수 5.5가 생긴다.
        // 2 : 오직 정수만 담을 수 있는 변수 i가 생성된다.
        // 3 : i는 5.5가 자신에게 담길 수 있는지 체크한다.(불가능)
        // 4 : i는 아쉬워하는 5.5에게 이렇게 이야기 합니다. `니가 정수가 된다면 들어올 수 있다.`
        // 5 : 5.5는 도저히 불가능 요구를 받고 치명적인 에러를 발생시킨다.(캐스팅 불가능 으로 인한 에러)
        //int i = 5.5;


        무기 a무기 = new 칼();
        // 1 : 칼 설계도로 만든 객체와 리모콘을 생성한다.
        // 2 : 오직 무기 타입의 객체 리모콘만 담을 수 있는 변수 a무기를 생성한다.
        // 3 : a무기는 칼 리모콘이 무기 타입의 리모콘과 같은지 체크한다. (불가능)
        // 4 : a무기는 칼 리모콘에게 '무기 타입이 된다면 들어올 수 있다'고 말한다.
        // 5 : 칼 객체 리모콘은 불가능 요구를 받고 에러를 발생시킨다.
    }
}

class 무기 {

}

class 칼 {

}

// 문제 : 매개변수를 사용해서 전사가 매번 다르게 공격하도록 해주세요.

class Main {
    public static void main(String[] args) {
        전사 a전사 = new 전사();

        a전사.공격(/* 수정가능지역 시작 */"브라이언", "칼" /* 수정가능지역 끝 */);
        // 브라이언이(가) 칼(으)로 공격합니다.

        a전사.공격(/* 수정가능지역 시작 */ "필립", "창"/* 수정가능지역 끝 */);
        // 필립이(가) 창(으)로 공격합니다.

        a전사.공격(/* 수정가능지역 시작 */"마크", "지팡이" /* 수정가능지역 끝 */);
        // 마크(가) 지팡이(으)로 공격합니다.
    }
}

class 전사 {


    void 공격(String 이름, String 무기) {
        System.out.println(이름 + "이(가) " + 무기 + "(으)로 공격합니다.");
    }
}

// 문제 : 매개변수를 사용해서 전사가 매번 다르게 공격하도록 해주세요.

class Main {
    public static void main(String[] args) {
        전사 a전사 = new 전사();

        a전사.공격(/* 수정가능지역 시작 */ "브라이언", "칼"/* 수정가능지역 끝 */);
        // 브라이언이(가) 칼(으)로 공격합니다.

        a전사.재공격();
        // 브라이언이(가) 칼(으)로 공격합니다.

        a전사.공격(/* 수정가능지역 시작 */ "필립", "창"/* 수정가능지역 끝 */);
        // 필립이(가) 창(으)로 공격합니다.

        a전사.공격(/* 수정가능지역 시작 */ "마크", "지팡이"/* 수정가능지역 끝 */);
        // 마크(가) 지팡이(으)로 공격합니다.

        a전사.재공격();
        // 마크(가) 지팡이(으)로 공격합니다.

        a전사.재공격();
        // 마크(가) 지팡이(으)로 공격합니다.
    }
}

class 전사 {
    String name;
    String 무기;

    void 공격(String 이름, String 무기) {
        this.name = 이름;
        this.무기 = 무기;
        System.out.println(이름 + "이(가) " + 무기 + "(으)로 공격합니다.");
    }

    void 재공격() {
        System.out.println(this.name + "이(가) " + this.무기 + "(으)로 공격합니다.");
    }
}